/*
 * tegra194-camera-imx585.dtsi - imx585 sensor device tree
 *
 * Copyright (c) 2019. FRAMOS.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* camera control gpio definitions */
#include "tegra194-cti-camera-fsm-imx304-3cam-1mux-header.dtsi"
#include "tegra194-cti-fsm-imx304-modes-header.dtsi"
#include "tegra194-cti-camera-3cam-1mux-base.dtsi"
#include "tegra194-xavier-nx-cti-NGX007-FSM-3CAM-base.dtsi"


/* camera control gpio definitions */
/ {
	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";

		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
                num_csi_lanes = <12>;
                max_lane_speed = <1500000>;
                min_bits_per_pixel = <10>;
                vi_peak_byte_per_pixel = <2>;
                vi_bw_margin_pct = <25>;
                max_pixel_rate = <240000>;
                isp_peak_byte_per_pixel = <5>;
                isp_bw_margin_pct = <25>;

	};
};

/{
	i2c@3180000 {
		tca9548@70 {
			i2c@0 {
				I2C0_NODE0 {
					devnode = "video0";

		    lifmd_lvds2mipi_1-device = <&lifmd_lvds2mipi_1_a>;
					/* Define any required hw resources needed by driver */
				    /* ie. clocks, io pins, power sources */
                    clocks = <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>,
						<&bpmp_clks TEGRA194_CLK_EXTPERIPH1>;
                    clock-names = "extperiph1", "pllp_grtba";
                    mclk = "extperiph1";
                    clock-frequency = <27000000>;
                    reset-gpios = <&gpio_i2c_cam 0 GPIO_ACTIVE_HIGH>;
                    pwdn-gpios = <&tegra_main_gpio CAM0_PWDN GPIO_ACTIVE_HIGH>;

				    CAM_DATA
					mode0 {
						num_lanes = NUM_OF_LANES0;
						tegra_sinterface = I2C0_NODE0_SINTERFACE;
						vc_id = "0";			
						SENSOR_MODE0
					};

					mode1 {
						num_lanes = NUM_OF_LANES0;
						tegra_sinterface = I2C0_NODE0_SINTERFACE;
						vc_id = "0";			
						SENSOR_MODE1
					};

                                        mode2 {
                                                num_lanes = NUM_OF_LANES0;
                                                tegra_sinterface = I2C0_NODE0_SINTERFACE;
						vc_id = "0";			
                                                SENSOR_MODE2
                                        };
			};
           		 
			lifmd_lvds2mipi_1_a: lifmd_lvds2mipi_1_a@22 {
                		compatible = "framos,lifmd_lvds2mipi_1";
                		reg = <0x22>;
                		device = "lifmd_lvds2mipi_1";
                    		cresetb = <&gpio_i2c_cam 1 GPIO_ACTIVE_HIGH>;
 
           		};


			};
            
			i2c@1 {
				I2C1_NODE0 {
					devnode = "video2";
		    lifmd_lvds2mipi_1-device = <&lifmd_lvds2mipi_1_c>;

					/* Define any required hw resources needed by driver */
				    /* ie. clocks, io pins, power sources */
                    clocks = <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>,
						<&bpmp_clks TEGRA194_CLK_EXTPERIPH1>;
                    clock-names = "extperiph1", "pllp_grtba";
                    mclk = "extperiph1";
                    clock-frequency = <27000000>;
                    reset-gpios = <&gpio_i2c_cam 2 GPIO_ACTIVE_HIGH>;
                    pwdn-gpios = <&tegra_main_gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;

					
					CAM_DATA
					mode0 {
						num_lanes = NUM_OF_LANES1;
						tegra_sinterface = I2C1_NODE0_SINTERFACE;
						vc_id = "0";			
						SENSOR_MODE0
					};

					mode1 {
						num_lanes = NUM_OF_LANES1;
						tegra_sinterface = I2C1_NODE0_SINTERFACE;
						vc_id = "0";
						SENSOR_MODE1
					};

                                        mode2 {
                                                num_lanes = NUM_OF_LANES1;
                                                tegra_sinterface = I2C1_NODE0_SINTERFACE;
                                                vc_id = "0";
                                                SENSOR_MODE2
                                        };

				};


                        lifmd_lvds2mipi_1_c: lifmd_lvds2mipi_1_c@22 {
                                compatible = "framos,lifmd_lvds2mipi_1";
                                reg = <0x22>;
                                device = "lifmd_lvds2mipi_1";
                   		cresetb = <&gpio_i2c_cam 3 GPIO_ACTIVE_HIGH>;
                        };

			};
            
            i2c@3 {
				I2C2_NODE0 {
					devnode = "video4";
			lifmd_lvds2mipi_1-device = <&lifmd_lvds2mipi_1_e>;		
					/* Define any required hw resources needed by driver */
				    /* ie. clocks, io pins, power sources */
                    clocks = <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>,
						<&bpmp_clks TEGRA194_CLK_EXTPERIPH1>;
                    clock-names = "extperiph1", "pllp_grtba";
                    mclk = "extperiph1";
                    clock-frequency = <27000000>;
                    reset-gpios = <&gpio_i2c_cam 7 GPIO_ACTIVE_HIGH>;
                    pwdn-gpios = <&gpio_i2c_cam 8 GPIO_ACTIVE_HIGH>;

					
					CAM_DATA
					mode0 {
						num_lanes = NUM_OF_LANES2;
						tegra_sinterface = I2C2_NODE0_SINTERFACE;
						vc_id = "0";			
						SENSOR_MODE0
					};

					mode1 {
						num_lanes = NUM_OF_LANES2;
						tegra_sinterface = I2C2_NODE0_SINTERFACE;
						vc_id = "0";
						SENSOR_MODE1
					};

                                        mode2 {
                                                num_lanes = NUM_OF_LANES2;
                                                tegra_sinterface = I2C2_NODE0_SINTERFACE;
                                                vc_id = "0";
                                                SENSOR_MODE2
                                        };
	
                };


                        lifmd_lvds2mipi_1_e: lifmd_lvds2mipi_1_e@22 {
                                compatible = "framos,lifmd_lvds2mipi_1";
                                reg = <0x22>;
                                device = "lifmd_lvds2mipi_1";
                    		cresetb = <&gpio_i2c_cam 9 GPIO_ACTIVE_HIGH>;
                        };

            };
	};
     };
};
