/*
 * Copyright (c) 2018-2019, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/* camera control gpio definitions */
/*
 * Copyright (c) 2018-2019, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include "tegra234-orin-nx-cti-rpi-imx219-modes-header.dtsi"
/ {
		tegra-capture-vi {
			num-channels = <1>;
			status = "okay";
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				vi_port0: port@0 {
					status = "okay";
					reg = <0>;
					rbpcv2_imx219_vi_in0: endpoint {
						status = "okay";
						port-index = <0>;
						bus-width = <2>;
						remote-endpoint = <&rbpcv2_imx219_csi_out0>;
					};
				};

			};
		};

	host1x@13e00000 {
		nvcsi@15a00000 {
			num-channels = <1>;
			#address-cells = <1>;
			#size-cells = <0>;
			csi_chan0: channel@0 {
				status = "okay";
				reg = <0>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan0_port0: port@0 {
						status = "okay";
						reg = <0>;
						rbpcv2_imx219_csi_in0: endpoint@0 {
							status = "okay";
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&rbpcv2_imx219_dual_out0>;
						};
					};
					csi_chan0_port1: port@1 {
						status = "okay";
						reg = <1>;
						rbpcv2_imx219_csi_out0: endpoint@1 {
							remote-endpoint = <&rbpcv2_imx219_vi_in0>;
						};
					};
				};
			};

		};
	};
	i2c@3180000 {
			
					rbpcv2_imx219_a@10 {
						/* I2C device address */
						reg = <0x10>;
                        compatible = "sony,imx219";
                        sensor_model = "imx219";
						/* V4L2 device node location */
						devnode = "video0";
                        SENSOR_COMMON
                        
                        #define LANE_POLARITY0 lane_polarity = "6";
                        #define NUM_LANES num_lanes = "2";
                        #define SINTERFACE tegra_sinterface = "serial_a";
                        mode0 { /* IMX219_MODE_3280x2464_21FPS */
                            LANE_POLARITY0
                            NUM_LANES
                            SINTERFACE
                            SENSOR_MODE0
                        };
                        mode1 { /* IMX219_MODE_3280x1848_28FPS */
                            LANE_POLARITY0
                            NUM_LANES
                            SINTERFACE
                            SENSOR_MODE1
                        };
                        mode2 { /* IMX219_MODE_1920x1080_30FPS */
                            LANE_POLARITY0
                            NUM_LANES
                            SINTERFACE
                            SENSOR_MODE2
                        };
                        mode3 { /* IMX219_MODE_1640x1232_30FPS */
                            LANE_POLARITY0
                            NUM_LANES
                            SINTERFACE
                            SENSOR_MODE3
                        };

                        mode4 { /* IMX219_MODE_1280x720_60FPS */
                            LANE_POLARITY0
                            NUM_LANES
                            SINTERFACE
                            SENSOR_MODE4
                        };

						ports {
							#address-cells = <1>;
							#size-cells = <0>;

							port@0 {
								reg = <0>;
								rbpcv2_imx219_dual_out0: endpoint {
									port-index = <0>;
									bus-width = <2>;
									remote-endpoint = <&rbpcv2_imx219_csi_in0>;
								};
							};
						};
					};
		};

		lens_imx219@RBPCV2 {
			min_focus_distance = "0.0";
			hyper_focal = "0.0";
			focal_length = "3.04";
			f_number = "2.0";
			aperture = "0.0";
		};
	
	
};

/ {
	tcp: tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";

		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <4>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <240000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vendor.
		 */
		modules {
			cam_module0: module0 {
				badge = "jakku_front_RBP194";
				position = "front";
				orientation = "1";
				status = "okay";
				cam_module0_drivernode0: drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "imx219 2-0010";
					proc-device-tree = "/proc/device-tree/i2c@3180000/rbpcv2_imx219_a@10";
				};
				cam_module0_drivernode1: drivernode1 {
					status = "okay";
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_imx219@RBPCV2/";
				};
			};
		};
	};
};
